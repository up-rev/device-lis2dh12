/**
  * @file lis2dh12.h
  * @author generated by mrt-device.py
  * @brief register defintions for LIS2DH12 device
  * 
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Devices/RegDevice/register_device.h"
#include "lis2dh12_regs.h"

/*user-block-top-start*/
/*user-block-top-end*/


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev;            //ptr to base register-device 
    mrt_reg_t mStatusAux;            //n/a
    mrt_reg_t mOutTemp;              //Temperature sensor data
    mrt_reg_t mWhoAmI;               //Device identification register
    mrt_reg_t mCtrl0;                //Control Register 0
    mrt_reg_t mTempCfg;              //n/a
    mrt_reg_t mCtrl1;                //Control Register 1
    mrt_reg_t mCtrl2;                //Control Register 2
    mrt_reg_t mCtrl3;                //Control Register 3
    mrt_reg_t mCtrl4;                //Control Register 4
    mrt_reg_t mCtrl5;                //Control Register 5
    mrt_reg_t mCtrl6;                //Control Register 6
    mrt_reg_t mReference;            //Reference value for interrupt generation
    mrt_reg_t mStatus;               //n/a
    mrt_reg_t mOutX;                 //X-axis acceleration data
    mrt_reg_t mOutY;                 //Y-axis acceleration data
    mrt_reg_t mOutZ;                 //Z-axis acceleration data
    mrt_reg_t mFifoCtrl;             //Fifo Control register
    mrt_reg_t mFifoSrc;              //Fifo status register
    mrt_reg_t mInt1Cfg;              //Interrupt 1 config register
    mrt_reg_t mInt1Src;              //Interrupt 1 source register
    mrt_reg_t mInt1Ths;              //Interrupt 1 threshold register
    mrt_reg_t mInt1Duration;         //Interrupt 1 duration register
    mrt_reg_t mInt2Cfg;              //Interrupt 2 config register
    mrt_reg_t mInt2Src;              //Interrupt 2 source register
    mrt_reg_t mInt2Ths;              //Interrupt 2 threshold register
    mrt_reg_t mInt2Duration;         //Interrupt 2 duration register
    mrt_reg_t mClickCfg;             //Click config
    mrt_reg_t mClickSrc;             //Click source
    mrt_reg_t mClickThs;             //Click Threshold
    mrt_reg_t mTimeLimit;            //Click time limit
    mrt_reg_t mTimeLatency;          //Click time latency
    mrt_reg_t mTimeWindow;           //Click time window
    mrt_reg_t mActThs;               //Activity threshold
    mrt_reg_t mActDur;               //Activity duration
/*user-block-struct-start*/
/*user-block-struct-end*/
}lis2dh12_t;

/**
 * @brief initializes LIS2DH12 device for i2c bus
 * @param dev ptr to LIS2DH12 device
 * @param i2c handle for i2c bus
 */
mrt_status_t lis_init_i2c(lis2dh12_t* dev, mrt_i2c_handle_t i2c);
/**
 * @brief initializes LIS2DH12 device for i2c bus
 * @param dev ptr to LIS2DH12 device
 * @param spi handle for i2c bus
 */
mrt_status_t lis_init_spi(lis2dh12_t* dev, mrt_spi_handle_t spi, mrt_gpio_t chipSelect );

/**
  *@brief tests interface with device
  *@param dev ptr to LIS2DH12 device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t lis_test(lis2dh12_t* dev);

/**
  *@brief writes register of device
  *@param dev ptr to LIS2DH12 device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define lis_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to LIS2DH12 device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define lis_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/
/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif